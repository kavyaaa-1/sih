# -*- coding: utf-8 -*-
"""Untitled40.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zwveqeq0cxwkSCqeTPt3xSvdlVwurRJ5
"""

# ! unzip /content/drive/MyDrive/ILDC_single.csv.zip

# from google.colab import drive
# drive.mount('/content/drive')

import pandas as pd

df=pd.read_csv("ILDC_single.csv")

dataFin=df[['text','label']]
dataFin=dataFin.loc[:]

stopwordlist = ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an',
             'and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',
             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do',
             'does', 'doing', 'down', 'during', 'each','few', 'for', 'from',
             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here',
             'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',
             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma',
             'me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',
             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're','s', 'same', 'she', "shes", 'should', "shouldve",'so', 'some', 'such',
             't', 'than', 'that', "thatll", 'the', 'their', 'theirs', 'them',
             'themselves', 'then', 'there', 'these', 'they', 'this', 'those',
             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was',
             'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',
             'why', 'will', 'with', 'won', 'y', 'you', "youd","youll", "youre",
             "youve", 'your', 'yours', 'yourself', 'yourselves']
STOPWORDS=set(stopwordlist)
def cleaning_stopwords(text):
  return " ".join([word for word in str(text).split() if word not in STOPWORDS])

import string
english_punctuations = string.punctuation
punctuations_list = english_punctuations
def cleaning_punctuations(text):
    translator = str.maketrans('', '', punctuations_list)
    return text.translate(translator)

import re
def cleaning_repeating_char(text):
    return re.sub(r'(.)1+', r'1', text)

def cleaning_URLs(data):
    return re.sub('((www.[^s]+)|(https?://[^s]+))',' ',data)

from nltk.tokenize import RegexpTokenizer

def preprocess(text):
    text = text.lower()
    text = cleaning_stopwords(text)
    text = cleaning_punctuations(text)
    text = cleaning_repeating_char(text)
    text = cleaning_URLs(text)

    # No need to use astype here
    # text = text.astype(str)

    tokenizer = RegexpTokenizer(r'\w+')
    text = tokenizer.tokenize(text)
    return text

dataFin['text'] = dataFin['text'].apply(preprocess)

X=df.text
Y=df.label

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import confusion_matrix, classification_report
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.20, random_state =261051)

vectorizer = TfidfVectorizer(ngram_range=(1,2), max_features=500000)
vectorizer.fit(X_train)
print('No. of feature_words:', len(vectorizer.get_feature_names_out()))

X_train=vectorizer.transform(X_train)
X_test=vectorizer.transform(X_test)

def model_Evaluate(model):
    y_pred = model.predict(X_test)
    print(classification_report(Y_test, y_pred))
    cf_matrix = confusion_matrix(Y_test, y_pred)
    categories = ['Bail Denied', 'Bail Accepted']
    group_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']
    group_percentages = ['{0:.2%}'.format(value) for value in cf_matrix.flatten() / np.sum(cf_matrix)]
    labels = [f'{v1}\n{v2}' for v1, v2 in zip(group_names, group_percentages)]
    labels = np.asarray(labels).reshape(2, 2)
    sns.heatmap(cf_matrix, annot=True, cmap='Blues', fmt='',
                xticklabels=categories, yticklabels=categories)
    plt.xlabel("Predicted values", fontdict={'size': 14}, labelpad=10)
    plt.ylabel("Actual values", fontdict={'size': 14}, labelpad=10)
    plt.title("Confusion Matrix", fontdict={'size': 18}, pad=20)
    plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import StackingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score

# Define your base models
base_models = [
    ('rf1', RandomForestClassifier(n_estimators=100, random_state=261051)),
    ('rf2', RandomForestClassifier(n_estimators=100, random_state=42)),
    # Add more base models as needed
]

# Define the meta-model (stacker)
meta_model = LogisticRegression() 

# Create the stacking classifier
stacking_model = StackingClassifier(estimators=base_models, final_estimator=meta_model)

# Evaluate the stacking model using cross-validation
#scores = cross_val_score(stacking_model, X_train, Y_train, cv=5)

# Fit the stacking model to the entire training dataset
stacking_model.fit(X_train, Y_train)

# Make predictions using the stacking model
y_pred_stacking = stacking_model.predict(X_test)

model_Evaluate(stacking_model)